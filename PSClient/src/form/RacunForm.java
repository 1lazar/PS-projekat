/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import Communication.Communication;
import domain.Naocare;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import domain.Pacijent;
import domain.StatistikaOdUsluga;
import java.util.Random;
import javax.swing.JOptionPane;
import domain.TerminPregleda;
import domain.Usluga;
import java.util.ArrayList;
import operation.Operation;
import table.PacijentiTabele;
import transfer.Request;
import transfer.Response;

/**
 *
 * @author Laza Laki Lakosta
 */
public class RacunForm extends javax.swing.JFrame {
    TerminPregleda tp;
    Usluga usluga;
    int cena=500,idTermin;
    /**
     * Creates new form PacijenteForm
     */
    public RacunForm() {
        initComponents();
        
    }
    public RacunForm(Pacijent pacijent,TerminPregleda termin) {
        initComponents();
        lblIme.setText(pacijent.getIme()+" "+pacijent.getPrezime());
        poljeDioptrija.setText(Double.toString(pacijent.getDioptrija()));
        //idTermin=id;
        try {
            Request request = new Request(null, Operation.GET_ALL_TERMIN_PREGLEDA);
            Communication.getInstance().getSender().send(request);
            Response response = (Response) Communication.getInstance().getReceiver().receive();
            if(response.getException()==null){
                List<TerminPregleda> termini = (List<TerminPregleda>) response.getResult();
                for(TerminPregleda t:termini){
                    if(t.getOpticarId()==termin.getOpticarId() && t.getPacijentId()==termin.getPacijentId()){
                        tp=t;
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(RacunForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboMarkaNaocara = new javax.swing.JComboBox<>();
        poljeDioptrija = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtRacun = new javax.swing.JTextField();
        btnCena = new javax.swing.JButton();
        comboVrsta = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        lblIme = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setText("Vasa dioprtija:");

        jLabel4.setText("Cena pregleda je 500 Din");

        jLabel3.setText("Izaberite marku naocara:");

        comboMarkaNaocara.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "REY BAN", "VERSACE", "DOLCE & GABBANA", "ARMANI", "GUCCI", " " }));

        poljeDioptrija.setEditable(false);

        jLabel1.setText("Vas racun je:");

        txtRacun.setEditable(false);

        btnCena.setText("Cena");
        btnCena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCenaActionPerformed(evt);
            }
        });

        comboVrsta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "merenje dioptrije", "merenje ocnog pritiska", "merenje dioptrije i ocnog pritiska" }));

        jLabel2.setText("Vrsta usluge:");

        lblIme.setText(" ");

        jLabel6.setText("Pacijent:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIme, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(poljeDioptrija)
                            .addComponent(txtRacun, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addComponent(btnCena))
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboVrsta, 0, 1, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboMarkaNaocara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(323, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIme)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboMarkaNaocara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboVrsta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(poljeDioptrija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRacun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCena))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCenaActionPerformed
//        int cenaVrste=odredjivanjeCena();
//        String odgovor = JOptionPane.showInputDialog(this, "Da li ste zavodoljni kupovinom?");
//        if(odgovor.equals("ne")){
//            String odg = JOptionPane.showInputDialog(this, "Zasto niste zadovoljni?");
//            
//        }
//        try {
//                Request request = new Request(null, Operation.GET_ALL_NAOCARE);
//                Communication.getInstance().getSender().send(request);
//                Response response = (Response) Communication.getInstance().getReceiver().receive();
//                if(response.getException()==null){
//                    List<Naocare> naocare = (List<Naocare>) response.getResult();
//                    String marka = (String) comboMarkaNaocara.getSelectedItem();
//                    for(Naocare n:naocare){
//                        if(n.getMarka().equals(marka)){
//                            int br = n.getKolicina();
//                            br -= 1;
//                            n.setKolicina(br);
//                        }
//                    }
//                    request = new Request(naocare, Operation.UPDATE_NAOCARE);
//                    Communication.getInstance().getSender().send(request);
//                    response = (Response) Communication.getInstance().getReceiver().receive();
//                    String vrsta = (String) comboVrsta.getSelectedItem();
//                    
//                    Usluga usluga = new Usluga();
//                    usluga.setVrstaUsluge(vrsta);
//                    usluga.setCenaUsluge(cenaVrste);
////                    usluga.setTerminPregledaId(tp.getTerminId());
//                    request = new Request(usluga, Operation.SAVE_USLUGA);
//                    Communication.getInstance().getSender().send(request);
//                    response = (Response) Communication.getInstance().getReceiver().receive();
//                    
//                    int idUsluge=0;
//                    request = new Request(usluga, Operation.GET_ALL_USLUGE);
//                    Communication.getInstance().getSender().send(request);
//                    response = (Response) Communication.getInstance().getReceiver().receive();
//                    List<Usluga> usluge = (List<Usluga>) response.getResult();
//                    for(Usluga u:usluge){
////                        if(usluga.getTerminPregledaId()==u.getTerminPregledaId() && usluga.getVrstaUsluge().equals(u.getVrstaUsluge()) && usluga.getCenaUsluge()==u.getCenaUsluge()){
//                            idUsluge=u.getUslugaId();
//                        }
//                    }
//                    
//                    
//                    //StatistikaOdUsluga sou = new StatistikaOdUsluga(PROPERTIES+1, tp.getOpticarId(), idUsluge);
//                    StatistikaOdUsluga sou = new StatistikaOdUsluga();
//                    sou.setOpticarId(tp.getOpticarId());
//                    sou.setUslugaId(idUsluge);
//                    request = new Request(sou, Operation.SAVE_STATISTIKA_OD_USLUGA);
//                    Communication.getInstance().getSender().send(request);
//                    response = (Response) Communication.getInstance().getReceiver().receive();
//                }
//
//            } catch (Exception ex) {
//                Logger.getLogger(RacunForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        DatabaseRepository db = new DatabaseRepository();
//        String vrsta = (String) comboVrsta.getSelectedItem();
//        Usluga u = new Usluga(HEIGHT, vrsta, cena, HEIGHT);
    }//GEN-LAST:event_btnCenaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RacunForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RacunForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RacunForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RacunForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RacunForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCena;
    private javax.swing.JComboBox<String> comboMarkaNaocara;
    private javax.swing.JComboBox<String> comboVrsta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblIme;
    private javax.swing.JTextField poljeDioptrija;
    private javax.swing.JTextField txtRacun;
    // End of variables declaration//GEN-END:variables
    
//    public void random(){
//        double min = -10.2;
//        double max = 10;
//        random_int = (double)Math.floor(Math.random()*(max-min+1)+min);
//        txtDioptrija.setText(String.valueOf(random_int));
//    }
    public int odredjivanjeCena(){
        int m=0;
        String broj = poljeDioptrija.getText();
        String marka = (String) comboMarkaNaocara.getSelectedItem();
        String usluga = comboVrsta.getSelectedItem().toString();
        System.out.println(marka);
        
        double n = Double.parseDouble(broj);
        if(n>0 && n<10){
            cena += 3500;
        }else{
            cena += 4500;
        }
        if(n == 0){
            JOptionPane.showMessageDialog(this, "Unesite dioptriju");
        }
        switch (marka) {
            case "REY BAN":
                cena += 7560;
                break;
            case "VERSACE":
                cena += 17560;
                break;
            case "DOLCE & GABBANA":
                cena += 12060;
                break;
            case "ARMANI":
                cena += 27560;
                break;
            case "GUCCI":
                cena += 37560;
                break;
            default:
                throw new AssertionError();
        }
        if(usluga.equals("merenje diotrije")){
            m=1000;
            cena += 1000;
        }else{
            m=2500;
            cena += 2500;
        }
        
        txtRacun.setText(String.valueOf(cena));
        return m;
    }

}
